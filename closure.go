package main

import "fmt"

/*
Замыкание (closure) - объект функции, который запоминает свое лексическое окружение, даже когда не выполняется в своей области видимости.

Замыкание включает в себя:

1. Внешняя функция, которая определяет некоторую область видимости и в которой опеределены некоторые параметры и переменные - лексическое окружение
2. Переменные и параметры (лексическое окружение), которые определены во внешней функции
3. Вложенная функция, которая использует переменные и параметры внешней функции

Замыкания реализуются с помощью анонимных функций.
*/
func Demo6() {

	//fn = inner, т.к. функция Outer возвращает функцию inner
	fn1 := Outer()

	fn1() //6
	fn1() //7

	fn2 := Multiply2(5)
	result1 := fn2(5)
	fmt.Println(result1)

	result2 := fn2(6)
	fmt.Println(result2)
}

// Внешняя функция Outer
func Outer() func() {

	//Некоторая переменная - лексическое окружение функции inner
	n := 5

	//Вложенная функция
	inner := func() {

		//Действия с переменной n
		n += 1
		fmt.Println(n)
	}

	return inner
}

// Еще пример замыкания
func Multiply2(n int) func(int) int {
	return func(m int) int { return n * m }
}

/*
Описание функции Multiply2:

Вызов функции приводит в вызову внутренней функции func(m int) int { return n * m }, которая запоминает окружение, в нашем случае переменную n
При вызове функции Multiply2 определяется переменная func, которая и представляет собой замыкание, т.е. объединяет функцию и окружение, в котором была создана.

Т.е. result1 - это замыкание, которое содержит и внутреннюю функцию func(m int) int { return n * m } и параметр n, который существует во время создания замыкания.

Важно не запутаться в параметрах. При определении замыкания:

fn2 := Multiply2(5) - число 5 передается для параметра n функции Multiply2
result1 := fn2(5) - число 5 передается для параметра m внутренней функции func(m int) int { return n * m }
*/
